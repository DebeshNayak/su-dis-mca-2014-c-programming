2.a: What are the various relational and logical operators supported by C language?
  Explain with suitable examples.
Ans:
- An operator is a symbol that tells the computer to perform certain mathematical
  or logical manipulation.
- Operators are used in programs to manipulate data and variables.
- Operators usually form a part of the mathematical and local expressions.

  - C operator can be classified into a number of categories:
    1. Arithmetic operators
    2. Relational operators
    3. Logical operators
    4. Assignment operators
    5. Increment/decrement operators
    6. Conditional operators
    7. Bitwise operators
    8. Special operators

  - Operators in C are of two groups:
    1. Unary Operator:
      - Operator that operates on only one operand.
      Example: Increment, Decrement operator

    2. Binary Operator:
      - Operator that operates on only two operand.
      Example: Addition, Subtraction operator

- Now the operators are described in details below:
-----------------------
1. Arithmetic Operators:
  - Arithmetic operators are used to perform mathematical calculations like addition,
  subtraction, multiplication, division and modulus in C programs.
  - Arithmetic operators are of 5 types, which are described below:

    1.1: Addition (+)
      - Add two operands
      - Example: a + b
    1.2: Subtraction (-)
      - Subtracts second operand from the first.
      - Example: a - b
    1.3: Multiplication (*)
      - Multiplies both operands
      - Example: a * b
    1.4: Division (/)
      - Divides numerator(first operands) by de-numerator(second operands)
      - Example: b / a
    1.5: Modulus (%)
      - Remainder after integer division of two operands.
      - Example: a % a

  Example:
  #include <stdio.h>
  void main(){

    int a = 9, b = 4;

    // Addition
    printf("a + b = %d \n", a + b);

    // Subtraction
    printf("a - b = %d \n", a - b);

    // Multiplication
    printf("a * b = %d \n", a * b);

    // Division
    printf("a / b = %d \n", a / b);

    // Modulus
    printf("a % b = %d \n", a % b);

  }

---------------------------

2. Relational Operators:
  - Relational operators are used to find the relation between two variables i.e.
  to compare the values of two variables in a C program.
  - These operators are of 6 types as described below:

  2.1: Equality Operator (==)
  - Checks if the values of two the operands are equal.
  - If it is equal return true, else return false
  Example: a == b (a is equal to b)

  2.2: Not Equal to (!=)
  - Checks if the values of the two operands are not equal.
  - If it is not equal return true.
  - If it is equal return false
  Example: a != b (a is not equal to b)

  2.3: Greater Than (>):
  - Checks if the value of the left operand is greater then the value of the right
  operand.
  - If yes return true, otherwise return false.
  Example: a > b (a is greater than y)

  2.4: Less Than (<)
  - Checks if the value of the left operand is less then the value of the right operand.
  - If yes return true, otherwise return false.
  Example: a < b (a is less then b)

  2.5: Greater Than Equal to (>=)
  - Check if the value of the left operand is greater than or equal to the value of
  right operand.
  - If yes, then the condition return true.
  Example: a >= b (a is greater than equal to b)

  2.6: Less Than Equal to (<=)
  - Check if the value of the left operand is less than or equal to the value of the
  right operand.
  - If yes, then the condition return true.
  Example: a <= b (a is less than equal to b)

  Example:
  #include <stdio.h>
  void main(){
    int a = 9, b = 4;

    // equality operator
    if(a == b){
      printf("a is equal to b");
    }else{
      printf("a is not equal to b");
    }

    // Not equal operator
    if(a != b){
      printf("a is not equal to b");
    } else{
      printf("a is equal to b");
    }

    // Greater than operator
    if(a > b){
      printf("a is greater than b");
    }

    // Less than operator
    if(a > b){
      printf("a is less than b");
    }

    // Greater than equal to operator
    if(a >= b){
      printf("a is greater equal to than b");
    }

    // Less than equal to operator
    if(a <= b){
      printf("a is less equal to than b");
    }
  }

-----------------------------

3. Logical Operator:
  - These operators are used to test more than one condition and make decision.
  - There are 3 logical operators in C language.
  i. AND (&&):
  - It is called logical AND operator.
  - If both of its operands or expression are non-zero or true then this condition returns true.
  Example: a && b

  ii. OR (||):
  - It is called logical OR operator.
  - If any one of the operand or expression is non-zero or true then this condition returns true.
  Example: a || b

  iii. NOT (!):
  - It is called logical NOT operator.
  - It is used to reverse the logical state of its operand.
  - If a condition is true, then logical NOT operator will make it false.
  Example: !a

Example:
#include<stdio.h>
void main(){
  int m=40,n=20;
  int o=20,p=30;

  // AND operator
  if (m>n && m !=0)
  {
      printf("&& Operator : Both conditions are true\n");
  }

  // OR operator
  if (o>p || p!=20)
  {
      printf("|| Operator : Only one condition is true\n");
  }

  // NOT operator
  if (!(m>n && m !=0))
  {
      printf("! Operator : Both conditions are true\n");
  }
  else
  {
      printf("! Operator : Both conditions are true. " \
      "But, status is inverted as false\n");
  }
}

--------------------------------

4. Assignment Operator:
- In C programs, values for the variables are assigned using assignment operators.
- Example: If the value “10” is to be assigned for the variable “sum”, it can be
  assigned as “sum = 10;”
- There are two categories of assignment operators in C language.
  i. Simple assignment operator (=)
  ii. Compound assignment operator (+=, -=, *=, /=, %=)

- These are described in details below:

  5.1: Simple Assignment Operator (=)
  - Simple assignment operator. Assigns values from right side operands to left side operand.
  - Example: c = a + b

  5.2: Add Assignment Operator (+=)
  - It adds the right operand to the left operand and assign the result to the left operand
  - Example: c += a (which is equivalent to c = c + a)

  5.3: Subtract Assignment Operator (-=)
  - It subtracts the right operand from the left operand and assigns the result to the left operand.
  - Example: c -= a (which is equivalent to c = c - a)

  5.4: Multiply Assignment Operator
  - It multiplies the right operand from the left operand and assigns the result to the left operand.
  - Example: c *= a (which is equivalent to c = c * a)

  5.5: Divide and Assignment Operator
  - It divide the left operand from the right side and assigns the result to the left operand.
  - Example: c /= a (which is equivalent to c = c / a)

  5.6: Modulus Assignment Operator
  - It takes modulus of the left operand from the right side operand and assigns the result to the left operand.
  - Example: c %= a (which is equivalent to c = c % a)

  5.5: Right shift and Assignment operator (>>=)
  5.6: Left shift and Assignment operator (<<=)
  5.7: Bitwise and Assignment operator (&=)
  5.8: Bitwise exclusive OR and Assignment operator (^=)
  5.9: Bitwise inclusive OR and assignment operator (|=)

  Example:
  #include <stdio.h>
  void main(){

    int a = 9, b = 4, c;

    // Simple assignment operator
    c = a + b;
    printf("c = %d \n", c);

    // Add assignment operator
    c += a;
    printf("c = %d \n", c);

    // Substract assignment operator
    c -= a;
    printf("c = %d \n", c);

    // Multiply assignment operator
    c *= a;
    printf("c = %d \n", c);

    // Divide and assignemnt operator
    c /= a;
    printf("c = %d \n", c);

    // Modulus and assignment operator
    c %= a;
    printf("c = %d \n", c);

  }

------------------------

5. Increment and Decrement Operator:
  - The increment operator ++ adds 1 to the operand, while decrement operator --
    subtract 1.
  - Both are unary operators.
  1.6: Increment (++)
    - Increases the integer value of the operand by one.
    - Example: a++
  1.7. Decrement (--)
    - Decrease the integer value of the operand by one.
    - Example: a--

Example:
#include <stdio.h>
void main(){

  int a = 5;

  printf("Increment: %d", ++a);

  printf("Decrement: %d", --a);

}
-------------------
6. Conditional Operator:
  - This is a ternary operator pair of the following form:
    conditional-exp ? exp1 : exp1
  - Here if conditional-exp returns true then code inside exp2 will execute, otherwise exp3 will execute.
  - We can say it the shortcut of "if...else" statement.
  - But here we can use only short expressions, but for long expression we have to use "if...else" statement
  Example:
  a = 10;
  b = 15;
  x = (a > b) ? a : b;

  which is same as following using "if statement":

  if(a > b)
    x = a;
  else
    x = b;

  Example:
  #include <stdio.h>

  void main(){
    int x = 1, y;
    y = (x == 1) ? 2 : 0;

    printf("x value is %d", x);
    printf("y value is %d", y);
  }
-------------------
7. Bitwise Operator:
  - C has distinction of supporting special operators know as bitwise operators for manipulation of data at bit level.
  - These operators are used to perform bit operations.
  - These operators are used for testing the bits, or shifting them right or left.
  - Decimal values are converted into binary values which are the sequence of bits and bitwise operators work on these bits.
  - Bitwise operators may not be applied to float or double.
  - There are 6 Bitwise operator:

  1. Bitwise AND (&)
    - It copies a bit to the result if it exist in both operands
    - Example: a & b
  2. Bitwise OR (|)
    - It copies a bit to the result if it exist in either of the one operand
    - a | b
  3. Bitwise exclusive OR (^)
    - It copies the bit to the result if it is set in one operand but not both.
  4. Bitwise NOT (~)
    - It is a unary operator.
    - It flips the bits.
    Example:
    ~a
  5. Left shift (<<)
    - This moves the left side operand left by the number of bits specified by the right operand.
    Example:
    a << 2
  6. Right shift (>>)
    - This moves the left side operand right by the number of bits specified by the right operand.
    Example:
    a >> 2

Example:
#include <stdio.h>

int main()
{
   int m = 40,n = 80,AND_opr,OR_opr,XOR_opr,NOT_opr ;
   AND_opr = (m&n);
   OR_opr = (m|n);
   NOT_opr = (~m);
   XOR_opr = (m^n);
   printf("AND_opr value = %d\n",AND_opr );
   printf("OR_opr value = %d\n",OR_opr );
   printf("NOT_opr value = %d\n",NOT_opr );
   printf("XOR_opr value = %d\n",XOR_opr );
   printf("left_shift value = %d\n", m << 1);
   printf("right_shift value = %d\n", m >> 1);

   return 0;
}

-------------------
8. Special Operator:
  1. Ampersand (&):
    - This is used to get the address fo the variable.
    Example: &a will give the address of a.

  2. * :
    - This is used as pointer to the variable.
    Example: *a where, * is pointer to the variablle a.

  3. sizeof():
    - This give s the size of the variable as a integer value.
    Example: sizeOf(variable_name) will give us size occupied by the variable.

Example:
#include <stdio.h>
int main()
{
  int *ptr, q;
  q = 50;
  /* address of q is assigned to ptr */
  ptr = &q;
  char ch = 'a';
  /* display q's value using ptr variable */
  printf("%d \n", *ptr);
  printf("Size of character data type is: %d \n", sizeof(ch));
  return 0;
}
