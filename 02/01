2.a: What are the various relational and logical operators supported by C language?
  Explain with suitable examples.
Ans:
- An operator is a symbol that tells the compiler to perform specific mathematical
  or logical functions.
- C language is rich in built-in operators and provides the following types of operators.
  1. Arithmetic Operators
  2. Relational Operators
  3. Logical Operators
  4. Bitwise Operators
  5. Assignment Operators
  6. Misc Operators

1. Arithmetic Operators:
- C Arithmetic operators are used to perform mathematical calculations like addition,
  subtraction, multiplication, division and modulus in C programs.
    1.1: Addition (+)
      - Add two operands
      - Example: a + b
    1.2: Subtraction (-)
      - Subtracts second operand from the first.
      - Example: a - b
    1.3: Multiplication (*)
      - Multiplies both operands
      - Example: a * b
    1.4: Division (/)
      - Divides numerator(first operands) by de-numerator(second operands)
      - Example: b / a
    1.5: Modulus (%)
      - Remainder after integer division of two operands.
      - Example: a % a
    1.6: Increment (++)
      - Increases the integer value of the operand by one.
      - Example: a++
    1.7. Decrement (--)
      - Decrease the integer value of the operand by one.
      - Example: a--

  Example:
  #include <stdio.h>
  int main(){

    int a = 9, b = 4;

    // Addition
    printf("a + b = %d \n", a + b);

    // Subtraction
    printf("a - b = %d \n", a - b);

    // Multiplication
    printf("a * b = %d \n", a * b);

    // Division
    printf("a / b = %d \n", a / b);

    // Modulus
    printf("a % b = %d \n", a % b);

    // Increment
    printf("++a = %d", ++a);

    // Decrement
    printf("--a = %d", --a);

  }

2. Relational Operators:
  - Relational operators are used to find the relation between two variables i.e.
  to compare the values of two variables in a C program.
  2.1: Equality Operator (==)
  - Checks if the values of two the operands are equal.
  - If it is equal return true, else return false
  Example: a == b (a is equal to b)

  2.2: Not Equal to (!=)
  - Checks if the values of the two operands are not equal.
  - If it is not equal return true.
  - If it is equal return false
  Example: a != b (a is not equal to b)

  2.3: Greater Than (>):
  - Checks if the value of the left operand is greater then the value of the right
  operand.
  - If yes return true, otherwise return false.
  Example: a > b (a is greater than y)

  2.4: Less Than (<)
  - Checks if the value of the left operand is less then the value of the right operand.
  - If yes return true, otherwise return false.
  Example: a < b (a is less then b)

  2.5: Greater Than Equal to (>=)
  - Check if the value of the left operand is greater than or equal to the value of
  right operand.
  - If yes, then the condition return true.
  Example: a >= b (a is greater than equal to b)

  2.6: Less Than Equal to (<=)
  - Check if the value of the left operand is less than or equal to the value of the
  right operand.
  - If yes, then the condition return true.
  Example: a <= b (a is less than equal to b)

  Example:
  #include <stdio.h>
  int main(){

    int a = 9, b = 4;

    // equality operator
    if(a == b){
      printf("a is equal to b");
    }else{
      printf("a is not equal to b");
    }

    // Not equal operator
    if(a != b){
      printf("a is not equal to b");
    } else{
      printf("a is equal to b");
    }

    // Greater than operator
    if(a > b){
      printf();
    }

  }


3.

5. Assignment Operator:
- In C programs, values for the variables are assigned using assignment operators.
- Example: If the value “10” is to be assigned for the variable “sum”, it can be
  assigned as “sum = 10;”
- There are two categories of assignment operators in C language.
  i. Simple assignment operator (=)
  ii. Compound assignment operator (+=, -=, *=, /=, %=)

  5.1: Simple Assignment Operator (=)
  - Simple assignment operator. Assigns values from right side operands to left side operand.
  - Example: c = a + b

  5.2: Add Assignment Operator (+=)
  - It adds the right operand to the left operand and assign the result to the left operand
  - Example: c += a (which is equivalent to c = c + a)

  5.3: Subtract Assignment Operator (-=)
  - It subtracts the right operand from the left operand and assigns the result to the left operand.
  - Example: c -= a (which is equivalent to c = c - a)

  5.4: Multiply Assignment Operator
  - It multiplies the right operand from the left operand and assigns the result to the left operand.
  - Example: c *= a (which is equivalent to c = c * a)

  5.4: Divide and Assignment Operator
  - It divide the left operand from the right side and assigns the result to the left operand.
  - Example: c /= a (which is equivalent to c = c / a)

  5.4: Modulus Assignment Operator
  - It takes modulus of the left operand from the right side operand and assigns the result to the left operand.
  - Example: c %= a (which is equivalent to c = c % a)

  5.5: Right shift and Assignment operator (>>=)
  5.6: Left shift and Assignment operator (<<=)
  5.7: Bitwise and Assignment operator (&=)
  5.8: Bitwise exclusive OR and Assignment operator (^=)
  5.9: Bitwise inclusive OR and assignment operator (|=)

  Example:
  #include <stdio.h>
  int main(){

    int a = 9, b = 4, c;

    // Simple assignment operator
    c = a + b;
    printf("c = %d \n", c);

    // Add assignment operator
    c += a;
    printf("c = %d \n", c);

    // Substract assignment operator
    c -= a;
    printf("c = %d \n", c);

    // Multiply assignment operator
    c *= a;
    printf("c = %d \n", c);

    // Divide and assignemnt operator
    c /= a;
    printf("c = %d \n", c);

    // Modulus and assignment operator
    c %= a;
    printf("c = %d \n", c);

  }
