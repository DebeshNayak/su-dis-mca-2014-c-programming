2.a: What are the various relational and logical operators supported by C language?
  Explain with suitable examples.
Ans:
- An operator is a symbol that tells the computer to perform certain mathematical
  or logical manipulation.
- Operators are used in programs to manipulate data and variables.
- Operators usually form a part of the mathematical and local expressions.

  - C operator can be classified into a number of categories:
    1. Arithmetic operators
    2. Relational operators
    3. Logical operators
    4. Assignment operators
    5. Increment/decrement operators
    6. Conditional operators
    7. Bitwise operators
    8. Special operators

  - Operators in C are of two groups:
    1. Unary Operator:
      - Operator that operates on only one operand.
      Example: Increment, Decrement operator

    2. Binary Operator:
      - Operator that operates on only two operand.
      Example: Addition, Subtraction operator

- Now the operators are described in details below:
-----------------------
1. Arithmetic Operators:
  - Arithmetic operators are used to perform mathematical calculations like addition,
  subtraction, multiplication, division and modulus in C programs.
  - Arithmetic operators are of 5 types, which are described below:

    1.1: Addition (+)
      - Add two operands
      - Example: a + b
    1.2: Subtraction (-)
      - Subtracts second operand from the first.
      - Example: a - b
    1.3: Multiplication (*)
      - Multiplies both operands
      - Example: a * b
    1.4: Division (/)
      - Divides numerator(first operands) by de-numerator(second operands)
      - Example: b / a
    1.5: Modulus (%)
      - Remainder after integer division of two operands.
      - Example: a % a

  Example:
  #include <stdio.h>
  void main(){

    int a = 9, b = 4;

    // Addition
    printf("a + b = %d \n", a + b);

    // Subtraction
    printf("a - b = %d \n", a - b);

    // Multiplication
    printf("a * b = %d \n", a * b);

    // Division
    printf("a / b = %d \n", a / b);

    // Modulus
    printf("a % b = %d \n", a % b);

  }

---------------------------

2. Relational Operators:
  - Relational operators are used to find the relation between two variables i.e.
  to compare the values of two variables in a C program.
  - These operators are of 6 types as described below:

  2.1: Equality Operator (==)
  - Checks if the values of two the operands are equal.
  - If it is equal return true, else return false
  Example: a == b (a is equal to b)

  2.2: Not Equal to (!=)
  - Checks if the values of the two operands are not equal.
  - If it is not equal return true.
  - If it is equal return false
  Example: a != b (a is not equal to b)

  2.3: Greater Than (>):
  - Checks if the value of the left operand is greater then the value of the right
  operand.
  - If yes return true, otherwise return false.
  Example: a > b (a is greater than y)

  2.4: Less Than (<)
  - Checks if the value of the left operand is less then the value of the right operand.
  - If yes return true, otherwise return false.
  Example: a < b (a is less then b)

  2.5: Greater Than Equal to (>=)
  - Check if the value of the left operand is greater than or equal to the value of
  right operand.
  - If yes, then the condition return true.
  Example: a >= b (a is greater than equal to b)

  2.6: Less Than Equal to (<=)
  - Check if the value of the left operand is less than or equal to the value of the
  right operand.
  - If yes, then the condition return true.
  Example: a <= b (a is less than equal to b)

  Example:
  #include <stdio.h>
  void main(){
    int a = 9, b = 4;

    // equality operator
    if(a == b){
      printf("a is equal to b");
    }else{
      printf("a is not equal to b");
    }

    // Not equal operator
    if(a != b){
      printf("a is not equal to b");
    } else{
      printf("a is equal to b");
    }

    // Greater than operator
    if(a > b){
      printf("a is greater than b");
    }

    // Less than operator
    if(a > b){
      printf("a is less than b");
    }

    // Greater than equal to operator
    if(a >= b){
      printf("a is greater equal to than b");
    }

    // Less than equal to operator
    if(a <= b){
      printf("a is less equal to than b");
    }
  }

-----------------------------

3. Logical Operator:
  - These operators are used to test more than one condition and make decision.
  - There are 3 logical operators in C language.
  i. AND (&&):
  - It is called logical AND operator.
  - If both of its operands or expression are non-zero or true then this condition returns true.
  Example: a && b

  ii. OR (||):
  - It is called logical OR operator.
  - If any one of the operand or expression is non-zero or true then this condition returns true.
  Example: a || b

  iii. NOT (!):
  - It is called logical NOT operator.
  - It is used to reverse the logical state of its operand.
  - If a condition is true, then logical NOT operator will make it false.
  Example: !a

Example:
#include<stdio.h>
void main(){
  int age = 25, monthly_income = 20000;

  if((age > 20) && salary > 15000){
    printf("The person is eligible for loan");
  }

  if((age < 20) || (monthly_income < 15000 )){
    printf("The person is not eligigle for loan")
  }

  return 0;
}

--------------------------------

4. Assignment Operator:
- In C programs, values for the variables are assigned using assignment operators.
- Example: If the value “10” is to be assigned for the variable “sum”, it can be
  assigned as “sum = 10;”
- There are two categories of assignment operators in C language.
  i. Simple assignment operator (=)
  ii. Compound assignment operator (+=, -=, *=, /=, %=)

- These are described in details below:

  5.1: Simple Assignment Operator (=)
  - Simple assignment operator. Assigns values from right side operands to left side operand.
  - Example: c = a + b

  5.2: Add Assignment Operator (+=)
  - It adds the right operand to the left operand and assign the result to the left operand
  - Example: c += a (which is equivalent to c = c + a)

  5.3: Subtract Assignment Operator (-=)
  - It subtracts the right operand from the left operand and assigns the result to the left operand.
  - Example: c -= a (which is equivalent to c = c - a)

  5.4: Multiply Assignment Operator
  - It multiplies the right operand from the left operand and assigns the result to the left operand.
  - Example: c *= a (which is equivalent to c = c * a)

  5.5: Divide and Assignment Operator
  - It divide the left operand from the right side and assigns the result to the left operand.
  - Example: c /= a (which is equivalent to c = c / a)

  5.6: Modulus Assignment Operator
  - It takes modulus of the left operand from the right side operand and assigns the result to the left operand.
  - Example: c %= a (which is equivalent to c = c % a)

  5.5: Right shift and Assignment operator (>>=)
  5.6: Left shift and Assignment operator (<<=)
  5.7: Bitwise and Assignment operator (&=)
  5.8: Bitwise exclusive OR and Assignment operator (^=)
  5.9: Bitwise inclusive OR and assignment operator (|=)

  Example:
  #include <stdio.h>
  void main(){

    int a = 9, b = 4, c;

    // Simple assignment operator
    c = a + b;
    printf("c = %d \n", c);

    // Add assignment operator
    c += a;
    printf("c = %d \n", c);

    // Substract assignment operator
    c -= a;
    printf("c = %d \n", c);

    // Multiply assignment operator
    c *= a;
    printf("c = %d \n", c);

    // Divide and assignemnt operator
    c /= a;
    printf("c = %d \n", c);

    // Modulus and assignment operator
    c %= a;
    printf("c = %d \n", c);

  }

------------------------

5. Increment and Decrement Operator:
  - These are unary operator
  1.6: Increment (++)
    - Increases the integer value of the operand by one.
    - Example: a++
  1.7. Decrement (--)
    - Decrease the integer value of the operand by one.
    - Example: a--

Example:
#include <stdio.h>
void main(){

  int a = 5;

  printf("Increment: %d", ++a);

  printf("Decrement: %d", --a);

}
-------------------
