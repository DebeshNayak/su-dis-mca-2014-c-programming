4.a: Explain the significance of loops and control structure with the help of examples.
Ans:
Control Structure:
- A statement that is used to control the flow of execution in a program is called control structure.
- It combines instruction into logical unit. Logical unit has one entry point and one exit point.

Types of control structures:
There are 4 types of control structure available in C.
1. Sequence
2. Selection
3. Repetition
4. Function call

1.  Sequence:
- Statements are executed in a specified order.
- No statement is skipped and no statement is executed more than once.
  +---------+
  |Begin    |
  +----+----+
       |
+------+------+
|First Task   |
+------+------+
       |
+------+------+
|Second Task  |
+------+------+
       |
+------+------+
|Third Task   |
+------+------+
       |
 +-----+-----+
 |   Done    |
 +-----------+
Example:
#include<stdio.h>
void main() {
  int a;
  {
    int a=5;
    printf(“Square of a = %d”,a);
  }
}

2. Selection:
- It selects a statement to execute on the basis of condition.
- Statement is executed when the condition is true and ignored when it is false
e.g if, if...else, switch statement.

Example:
#include<stdio.h>
void main ()
{
  int y;

  printf("Enter a year:");
  scanf("%d",&y);

  if (y % 4==0) {
    printf("%d is a leap year.",y);
  }
  else {
    printf("%d is not a leap year.".y)
  }
}

3. Repetition:
- In this structure the statements are executed more than one time.
- It is also known as iteration or loop e.g while loop, for loop do-while loops etc.

Example:
#include<stdio.h>
void main()
{
  int a=1;

  while(a<=5)
  {
    printf(“This is a loop.\n”);
    a++;
  }
}

4. Function call:
- It is used to invite or call a piece of code or statement.
- In this case control jumps from main program to that piece of code and then returns back to main program.

Example:
#include<stdio.h>

int sum (int a, int b){
  return a + b;
}

void main()
{
  int a, b, res;

  a = 5;
  b = 6;

  res = sum(a, b);

  printf("Sum = %d", res);
}
----------------
Loops:
- We use loops when we have to execute a statement or a block of statements multiple times times.
- C Programming language provides 3 kind of loops:
1. While loop
2. Do...while loop
3. For loop

1. While loop:
- We use while loop when we have to repeats a statement or group of statements while a given condition is true.
- It tests the condition before executing the loop body.
- And when the condition becomes false, the program control passes from the loop to its immediate next line.
Syntax:
while(condition) {
   statement(s);
}

Example:
#include <stdio.h>

int main () {

   /* local variable definition */
   int a = 10;

   /* while loop execution */
   while( a < 20 ) {
      printf("value of a: %d\n", a);
      a++;
   }

   return 0;
}

2. Do...While loop
- It is more like a while loop except it tests the condition at the end of the loop body.
- In this way it execute the body of the loop at least one time.
Syntax:
do {
   statement(s);
} while( condition );

Example:
#include <stdio.h>

int main () {

   /* local variable definition */
   int a = 10;

   /* do loop execution */
   do {
      printf("value of a: %d\n", a);
      a = a + 1;
   }while( a < 20 );

   return 0;
}

3. For loop:
- The for loop is a repetition control structure that allows you to efficiently
  write a loop that needs to execute a specific number of times.
Syntax:
for ( init; condition; increment ) {
   statement(s);
}
Explanation:
 - init
  - The init step is executed first, and only once.
  - This step allows you to declare and initialize any loop control variables.
  - You are not required to put a statement here, as long as a semicolon appears.
- condition
  - The condition is evaluated.
  - If it is true, the body of the loop is executed.
  - If it is false, the body of the loop does not execute and the flow of control jumps to the next statement just after the 'for' loop.
- increment
  - After the body of the 'for' loop executes, the flow of control jumps back up
    to the increment statement.
  - This statement allows you to update any loop control variables.
  - This statement can be left blank, as long as a semicolon appears after the condition.

Example:
#include <stdio.h>

int main () {

   int a;

   /* for loop execution */
   for( a = 10; a < 20; a = a + 1 ){
      printf("value of a: %d\n", a);
   }

   return 0;
}
